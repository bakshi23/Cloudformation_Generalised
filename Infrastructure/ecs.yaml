AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys an ECS Service with an associated load balancer
Parameters:
  KeyPair:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the container instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be a valid EC2 keypair.
  LoadBalancerSubnets:
    Description: Subnet(s) for the load balancer
    Type: List<AWS::EC2::Subnet::Id>
  ECSSubnets:
    Description: Subnets for the ECS container instances
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    Description: VPC ID for resources
    Type: AWS::EC2::VPC::Id
  InstanceType:
    Description: Container instances EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - x1.32xlarge
      - x1.16xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  DesiredCapacity:
    Type: Number
    Default: 1
    Description: Number of instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Description: Maximum number of instances that can be launched in your ECS cluster.
  Owner:
   Description: Used to tag resources
   Type: String
  ClusterName:
    Type: String
    Description: Name of the cluster for environment.
 # Certificate:
 #  Type: String
 #  Description: Certificate ARN resource.
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-275ffe31
    us-east-2:
      AMIID: ami-62745007
    us-west-1:
      AMIID: ami-689bc208
    us-west-2:
      AMIID: ami-62d35c02
    eu-west-1:
      AMIID: ami-95f8d2f3
    eu-west-2:
      AMIID: ami-bf9481db
    eu-central-1:
      AMIID: ami-085e8a67
    ap-northeast-1:
      AMIID: ami-f63f6f91
    ap-southeast-1:
      AMIID: ami-b4ae1dd7
    ap-southeast-2:
      AMIID: ami-fbe9eb98
    ca-central-1:
      AMIID: ami-ee58e58a
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'ECSSubnets'
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: 1
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
      Tags:
        - Key: Name
          Value: Container Instance
          PropagateAtLaunch: 'true'
        - Key: Owner
          Value: !Ref 'Owner'
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref 'DesiredCapacity'
        MaxBatchSize: 1
        PauseTime: PT5M
        WaitOnResourceSignals: true
  ECSUpStepScalePolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ECSAutoScalingGroup
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 1
  ECSDownStepScalePolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ECSAutoScalingGroup
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: "-1"

  ECSCPUAlarmUp:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref ECSUpStepScalePolicy
      AlarmDescription: >
        The CPU utilization of the ECS cluster has exeeded 90% for more than 3 minutes.
        Breaching this alarm should trigger an AutoScalingGroup to scale up.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
      EvaluationPeriods: 3
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Period: 60
      Statistic: Average
      Threshold: 90
  ECSCPUAlarmDown:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref ECSDownStepScalePolicy
      AlarmDescription: >
        The CPU utilization of the ECS cluster has dropped below 5% for more than one hour.
        Breaching this alarm should trigger an AutoScalingGroup to scale up.
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Period: 3600
      Statistic: Average
      Threshold: 5
  # ECSMemAlarmUp:
  #   Type: "AWS::CloudWatch::Alarm"
  #   Properties:
  #     ActionsEnabled: true
  #     AlarmActions:
  #       - !Ref ECSUpStepScalePolicy
  #     AlarmDescription: >
  #       The MemoryReservation of the ECS cluster has exceeded 90% for more than 3 minutes.
  #       Breaching this alarm should trigger an ASG scale out.
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     Dimensions:
  #       - Name: ClusterName
  #         Value: !Ref ECSCluster
  #     EvaluationPeriods: 3
  #     MetricName: MemoryReservation
  #     Namespace: AWS/ECS
  #     Period: 60
  #     Statistic: Average
  #     Threshold: 90
  # ECSMemAlarmDown:
  #   Type: "AWS::CloudWatch::Alarm"
  #   Properties:
  #     ActionsEnabled: true
  #     AlarmActions:
  #       - !Ref ECSDownStepScalePolicy
  #     AlarmDescription: >
  #       The MemoryReservation of the ECS cluster has dropped below 10% for more than 1 hour.
  #       Breaching this alarm should trigger an ASG scale in.
  #     ComparisonOperator: LessThanThreshold
  #     Dimensions:
  #       - Name: ClusterName
  #         Value: !Ref ECSCluster
  #     EvaluationPeriods: 1
  #     MetricName: MemoryReservation
  #     Namespace: AWS/ECS
  #     Period: 3600
  #     Statistic: Average
  #     Threshold: 10

  ContainerInstancesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VpcId'
      GroupDescription: Enable HTTP from the ApplicationLoadBalancer on dynamic ports
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 32768
          ToPort: 60999
          SourceSecurityGroupId: !Ref 'LoadBalancerSecurityGroup'
      Tags:
        - Key: Name
          Value: private-SecurityGroup-from-ALB
        - Key: Owner
          Value: !Ref 'Owner'
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            '01_add_instance_to_cluster':
              command: !Join
                - ""
                - - "#!/bin/bash \n"
                  - "yum install -y aws-cli\n"
                  - !Sub "echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config\n"
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ""
                - - "[main]"
                  - "\n"
                  - !Sub "stack=${AWS::StackId}"
                  - "\n"
                  - !Sub "region=${AWS::Region}"
                  - "\n"
              mode: 000400
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ""
                - - "[cfn-auto-reloader-hook]"
                  - "\n"
                  - "triggers=post.update\n"
                  - "path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\n"
                  - !Sub "action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ContainerInstances"
                  - "\n"
              mode: 000400
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'ContainerInstanceProfile'
      KeyName: !Ref 'KeyPair'
      SecurityGroups:
        - !Ref 'ContainerInstancesSecurityGroup'
      UserData:
        Fn::Base64: !Join
          - ""
          - - "#!/bin/bash -xe \n"
            - "yum -y update \n"
            - "yum install -y aws-cfn-bootstrap \n"
            - !Sub "/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstances --region ${AWS::Region}"
            - "\n"
            - !Sub "/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}"
            - "\n"
  ContainerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'ContainerServiceRole'
  ContainerServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
          - PolicyName: ecs-service
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - ecs:CreateCluster
                    - ecs:DeregisterContainerInstance
                    - ecs:DiscoverPollEndpoint
                    - ecs:Poll
                    - ecs:RegisterContainerInstance
                    - ecs:StartTelemetrySession
                    - ecs:Submit*
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "*"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the ApplicationLoadBalancer
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: public-SecurityGroup-ALB
        - Key: Owner
          Value: !Ref 'Owner'
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref 'LoadBalancerSecurityGroup'
      Subnets: !Ref 'LoadBalancerSubnets'
      Tags:
        - Key: Owner
          Value: !Ref 'Owner'
  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'NullTargetGroup'
      LoadBalancerArn: !Ref 'ApplicationLoadBalancer'
      Port: 80
      Protocol: HTTP
  ApplicationLoadBalancerHTTPSListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'NullTargetGroup'
      LoadBalancerArn: !Ref 'ApplicationLoadBalancer'
      Port: 443
      Protocol: HTTPS
  NullTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - ApplicationLoadBalancer
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: alb-null-target-group
Outputs:
  Cluster:
    Description: The created ECS cluster
    Value: !Ref 'ECSCluster'
  Listener:
    Description: ApplicationLoadBalancer Listener
    Value: !Ref 'ApplicationLoadBalancerListener'
  HTTPSListener:
    Description: ApplicationLoadBalancer HTTPS Listener
    Value: !Ref 'ApplicationLoadBalancerHTTPSListener'
  ApplicationLoadBalancerEndpoint:
    Description: DNS name of the ApplicationLoadBalancer
    Value: !GetAtt 'ApplicationLoadBalancer.DNSName'
  SecurityGroup:
    Description: Security Group GroupID of the ECS instances
    Value: !GetAtt 'ContainerInstancesSecurityGroup.GroupId'
